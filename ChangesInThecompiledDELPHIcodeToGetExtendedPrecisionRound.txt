00409A03 | 90                    | nop                                     			//avoid original code frndint  (round)            
00409A04 | 90                    | nop         
______________________________________________________________________________
In the original code, the real number that had to be shown, had been previously rounded and then transform in a integer with al least 15 significant digits 
(doubled precision), and is into the st0 FPU register just ready to be store in memory in 18 digits BCD (Binary Coded Decimal) format.
With the new code we avoid the initial rounded code (frndint noped) and then obtain the decimal part and store it in memory just before do the same with
the integer part to get an extra precision of the real number. Then we avoid again other rounded made in the original code (in normal asm). Indeed the
memory space used for the last rounded is used to insert the new code. 
____________________________________________________________________________________________________________________________________                           
00409A26 | 8D7B 03               	| lea edi,dword ptr ds:[ebx+3]            	//unchanged (originalcode)
00409A29 | EB 37                 	| jmp 409A59                              		//jum to the new FPU code
00409A2B | 90                    	| nop                                     
00409A2C | BA 0A000000         | mov edx,A                               		//now 12 pairs of figures (BDC 10+2)
00409A31 | 9B                    	| fwait                                    		//unchanged (originalcode)
00409A32 | 8A442A E7            	| mov al,byte ptr ds:[edx+ebp-19]        
00409A36 | 88C4                  	| mov ah,al                               
00409A38 | C0E8 04               	| shr al,4                                
00409A3B | 80E4 0F               	| and ah,F                                 
00409A3E | 66:05 3030            	| add ax,3030                             
00409A42 | 66:AB                 	| stosw                                    
00409A44 | 4A                    	| dec edx                                
00409A45 | 75 EB                 	| jne 409A32                              
00409A47 | 32C0                  	| xor al,al                               
00409A49 | AA                   	| stosb                                    
00409A4A | 8B7D F8               	| mov edi,dword ptr ss:[ebp-8]             
00409A4D | 037D 08              	| add edi,dword ptr ss:[ebp+8]     	//unchanged (originalcode)       
00409A50 | 79 3B                 	| jns 409A8D                         		//jmp to avoid round      
00409A52 | 31C0                  	| xor eax,eax                              
00409A54 | E9 77FFFFFF           | jmp 4099D0    				//long jump (original code)                           
00409A59 | D9C0                  	| fld st(0),st(0)                         		//store value in st0 also in st1
00409A5B | 9B                    	| fwait                                   		//Check pending unmasked floating-point exceptions
00409A5C | D9C0                  	| fld st(0),st(0)                         		//store value in st0 also in st1
00409A5E | D9FC                  	| frndint                                 		//round
00409A60 | DBF1                  	| fcomi st(0),st(1)                        		//is St0 >= than st1
00409A62 | 9B                    	| fwait                                   
00409A63 | 76 06                 	| jbe 409A6B                              		// jmp if below or iqual 
00409A65 | D9E8                  	| fld1                                   			// store 1 in st0
00409A67 | DEE9                  	| fsubp st(1),st(0)                       		//substrac 1 to the round value to get truncate
00409A69 | D9C0                  	| fld st(0),st(0)                         
00409A6B | DEEA                  	| fsubp st(2),st(0)                   		//substrac value with wit the trancate one to get decimal part
00409A6D | D9C9                  	| fxch st(0),st(1)                       		//exchange st0 with st1
00409A6F | 66:B8 0A00            	| mov ax,A                                 		//store $0A (decimal 10) in ax
00409A73 | 66:8945 E6            	| mov word ptr ss:[ebp-1A],ax             //move ax to memory
00409A77 | DE4D E6               	| fimul st(0),word ptr ss:[ebp-1A]       //multiply value in st0 by decimal 10
00409A7A | D9FC                  	| frndint                                  		//round
00409A7C | DE4D E6               	| fimul st(0),word ptr ss:[ebp-1A]       //multiply value in st0 by decimal 10
00409A7F | DF75 E8               	| fbstp tword ptr ss:[ebp-18],st(0)      //store decimal part of st0 value into 18 digits BCD (Binary Coded Decimal) format, store it in memory and pop st0
00409A82 | DF75 E9               	| fbstp tword ptr ss:[ebp-17],st(0)      //store integer part of st0 value into 18 digits BCD (Binary Coded Decimal) format, store it in memory and pop st0
00409A85 | 9B                    	| fwait                                    		//Check pending unmasked floating-point exception
00409A86 | DBE3                  	| fninit                                  			//Initialize FPU
00409A88 | EB A2                 	| jmp 409A2C                               		//jmp back to original code
00409A8A | 90                    	| nop                                     
00409A8B | 90                    	| nop                                     
00409A8C | 90                    	| nop                                     
00409A8D | BF 14000000         | mov edi,14                              		//19 figures plus (,) 